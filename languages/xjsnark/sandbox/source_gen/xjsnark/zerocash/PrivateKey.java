package xjsnark.zerocash;

/*Generated by MPS */

import backend.auxTypes.StructDefinition;
import backend.auxTypes.UnsignedInteger;
import backend.structure.CircuitGenerator;
import java.util.ArrayList;
import backend.auxTypes.VariableState;
import backend.auxTypes.IAuxType;

public class PrivateKey extends StructDefinition {


  /*package*/ UnsignedInteger[] a_sk = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{8}, 32);


  public void __makeInput() {

    a_sk = UnsignedInteger.createInputArray(CircuitGenerator.__getActiveCircuitGenerator(), a_sk.length, 32);










  }


  public void __makeOutput() {
    UnsignedInteger.makeOutput(CircuitGenerator.__getActiveCircuitGenerator(), a_sk);





  }


  public void __makeWitness() {


    a_sk = UnsignedInteger.createWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), a_sk.length, 32);










  }


  public void __makeVerifiedWitness() {

    a_sk = UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), a_sk.length, 32);











  }

  public void __alignAndPackAll() {

    ArrayList<VariableState> states = new ArrayList();

    for (int i = 0; i < a_sk.length; i++) {
      states.add(a_sk[i].getState());
    }






    for (VariableState state : states) {
      state.setPackedAhead(true);
      state.setMustBeWithinRange(true);
      state.setConditionallySplittedAndAlignedAhead(true);
    }

  }
  public static Class<?> __getClassRef() {
    return PrivateKey.class;
  }

  public StructDefinition __copy() {
    return null;
  }
  public int[] __getBasicElementsDetails() {
    return null;
  }
  public ArrayList<IAuxType> __getBasicElements() {
    ArrayList<IAuxType> list = new ArrayList();

    for (int i = 0; i < a_sk.length; i++) {
      list.add(a_sk[i]);
    }






    return list;
  }
}
