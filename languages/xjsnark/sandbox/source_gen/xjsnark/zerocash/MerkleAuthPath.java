package xjsnark.zerocash;

/*Generated by MPS */

import backend.auxTypes.StructDefinition;
import backend.auxTypes.UnsignedInteger;
import java.math.BigInteger;
import backend.auxTypes.Bit;
import backend.structure.CircuitGenerator;
import backend.auxTypes.ConditionalScopeTracker;
import java.util.ArrayList;
import backend.auxTypes.VariableState;
import backend.auxTypes.IAuxType;

public class MerkleAuthPath extends StructDefinition {


  /*package*/ UnsignedInteger directionSelector = new UnsignedInteger(64, new BigInteger("0"));
  /*package*/ Digest[] digests = new Digest[PourCircuit.HEIGHT];
  public MerkleAuthPath() {
    for (int i = 0; i < digests.length; i++) {
      digests[i] = new Digest();
    }
  }
  /*package*/ Digest computeMerkleRoot(Digest leaf) {
    Bit[] directionBits = directionSelector.getBitElements();
    Digest currentDigest = leaf;
    UnsignedInteger[] inputToNextHash = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{16}, 32);

    for (int i = 0; i < PourCircuit.HEIGHT; i++) {
      for (int j = 0; j < 16; j++) {
        {
          Bit bit_a0a0e0f = directionBits[i].copy();
          if (bit_a0a0e0f.isConstant()) {
            if (bit_a0a0e0f.getConstantValue()) {
              inputToNextHash[j].assign((j >= 8 ? currentDigest.array[j - 8] : digests[i].array[j]), 32);
            } else {
              inputToNextHash[j].assign((j < 8 ? currentDigest.array[j] : digests[i].array[j - 8]), 32);

            }
          } else {
            ConditionalScopeTracker.pushMain();
            ConditionalScopeTracker.push(bit_a0a0e0f);
            inputToNextHash[j].assign((j >= 8 ? currentDigest.array[j - 8] : digests[i].array[j]), 32);

            ConditionalScopeTracker.pop();

            ConditionalScopeTracker.push(new Bit(true));

            inputToNextHash[j].assign((j < 8 ? currentDigest.array[j] : digests[i].array[j - 8]), 32);
            ConditionalScopeTracker.pop();
            ConditionalScopeTracker.popMain();
          }

        }
      }
      currentDigest = Util.sha2(inputToNextHash);
    }
    return currentDigest;
  }


  public void __makeInput() {

    directionSelector = UnsignedInteger.createInput(CircuitGenerator.__getActiveCircuitGenerator(), 64);





    if (digests != null) {
      for (int i = 0; i < digests.length; i++) {
        if (digests[i] != null) {
          digests[i].__makeInput();
        }
      }

    }





  }


  public void __makeOutput() {
    UnsignedInteger.makeOutput(CircuitGenerator.__getActiveCircuitGenerator(), directionSelector);





    if (digests != null) {
      for (int i = 0; i < digests.length; i++) {
        if (digests[i] != null) {
          digests[i].__makeOutput();
        }
      }

    }
  }


  public void __makeWitness() {


    directionSelector = UnsignedInteger.createWitness(CircuitGenerator.__getActiveCircuitGenerator(), 64);





    if (digests != null) {
      for (int i = 0; i < digests.length; i++) {
        if (digests[i] != null) {
          digests[i].__makeWitness();
        }
      }

    }





  }


  public void __makeVerifiedWitness() {

    directionSelector = UnsignedInteger.createVerifiedWitness(CircuitGenerator.__getActiveCircuitGenerator(), 64);





    if (digests != null) {
      for (int i = 0; i < digests.length; i++) {
        if (digests[i] != null) {
          digests[i].__makeVerifiedWitness();
        }
      }

    }






  }

  public void __alignAndPackAll() {

    ArrayList<VariableState> states = new ArrayList();
    states.add(directionSelector.getState());





    if (digests != null) {
      for (int i = 0; i < digests.length; i++) {
        if (digests[i] != null) {
          digests[i].__alignAndPackAll();
        }
      }

    }


    for (VariableState state : states) {
      state.setPackedAhead(true);
      state.setMustBeWithinRange(true);
      state.setConditionallySplittedAndAlignedAhead(true);
    }

  }
  public static Class<?> __getClassRef() {
    return MerkleAuthPath.class;
  }

  public StructDefinition __copy() {
    return null;
  }
  public int[] __getBasicElementsDetails() {
    return null;
  }
  public ArrayList<IAuxType> __getBasicElements() {
    ArrayList<IAuxType> list = new ArrayList();
    list.add(directionSelector);





    if (digests != null) {
      for (int i = 0; i < digests.length; i++) {
        if (digests[i] != null) {
          list.addAll(digests[i].__getBasicElements());
        }
      }

    }


    return list;
  }
}
