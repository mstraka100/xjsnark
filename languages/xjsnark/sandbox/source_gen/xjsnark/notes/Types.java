package xjsnark.notes;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import backend.auxTypes.Bit;
import backend.auxTypes.ConditionalScopeTracker;
import backend.eval.CircuitEvaluator;

public class Types extends CircuitGenerator {



  public static void main(String[] args) {
    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see examples) 
    new Types();
  }

  public Types() {
    super("Types");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {
        input.mapValue(BigInteger.valueOf(6), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
      }
      public void post() {
      }

    });

  }



  public void __init() {
    input = new UnsignedInteger(32, new BigInteger("0"));
    output = new UnsignedInteger(32, new BigInteger("0"));
  }

  public UnsignedInteger input;
  public UnsignedInteger output;

  @Override
  public void __defineInputs() {
    super.__defineInputs();
    input = UnsignedInteger.createInput(this, 32);







  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();
    UnsignedInteger.makeOutput(this, output);







  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();










  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();









  }
  public void outsource() {

    int k = (int) Math.ceil(5.7);
    // assume k is not constant actually. It could be a value read from another file using java code 

    // let's say we want to compare k to the input 

    // the following will give an error because types are not consistent. Instead use conversion functions 

    {
      Bit bit_i0p = input.isEqualTo(UnsignedInteger.instantiateFrom(32, k)).copy();
      if (bit_i0p.isConstant()) {
        if (bit_i0p.getConstantValue()) {
          output.assign(new UnsignedInteger(32, new BigInteger("1")), 32);
        } else {

        }
      } else {
        ConditionalScopeTracker.pushMain();
        ConditionalScopeTracker.push(bit_i0p);
        output.assign(new UnsignedInteger(32, new BigInteger("1")), 32);

        ConditionalScopeTracker.pop();

        ConditionalScopeTracker.push(new Bit(true));

        ConditionalScopeTracker.pop();
        ConditionalScopeTracker.popMain();
      }

    }

  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
