package xjsnark.notes;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import backend.auxTypes.Bit;
import backend.auxTypes.ConditionalScopeTracker;
import backend.eval.CircuitEvaluator;

public class DifferentOperators extends CircuitGenerator {



  public static void main(String[] args) {
    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see examples) 
    new DifferentOperators();
  }

  public DifferentOperators() {
    super("DifferentOperators");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {
        in1.mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        in2.mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

      }
      public void post() {
      }

    });

  }



  public void __init() {
    in1 = new UnsignedInteger(32, new BigInteger("0"));
    in2 = new UnsignedInteger(32, new BigInteger("0"));
    out1 = new UnsignedInteger(32, new BigInteger("0"));
    out2 = new UnsignedInteger(32, new BigInteger("0"));
    out3 = new UnsignedInteger(32, new BigInteger("0"));
  }

  public UnsignedInteger in1;
  public UnsignedInteger in2;
  public UnsignedInteger out1;
  public UnsignedInteger out2;
  public UnsignedInteger out3;

  @Override
  public void __defineInputs() {
    super.__defineInputs();
    in1 = UnsignedInteger.createInput(this, 32);
    in2 = UnsignedInteger.createInput(this, 32);







  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();
    UnsignedInteger.makeOutput(this, out1);
    UnsignedInteger.makeOutput(this, out2);
    UnsignedInteger.makeOutput(this, out3);







  }
  public void outsource() {

    // to check equality in the circuit use EQ instead of == 
    {
      Bit bit_c0o = in1.isEqualTo(in2).copy();
      if (bit_c0o.isConstant()) {
        if (bit_c0o.getConstantValue()) {
          out1.assign(new UnsignedInteger(1, new BigInteger("1")), 32);
        } else {
          out1.assign(new UnsignedInteger(2, new BigInteger("2")), 32);

        }
      } else {
        ConditionalScopeTracker.pushMain();
        ConditionalScopeTracker.push(bit_c0o);
        out1.assign(new UnsignedInteger(1, new BigInteger("1")), 32);

        ConditionalScopeTracker.pop();

        ConditionalScopeTracker.push(new Bit(true));

        out1.assign(new UnsignedInteger(2, new BigInteger("2")), 32);
        ConditionalScopeTracker.pop();
        ConditionalScopeTracker.popMain();
      }

    }

    // to check InEquality in the circuit use NEQ instead of != 
    {
      Bit bit_f0o = in1.isNotEqualTo(in2).copy();
      if (bit_f0o.isConstant()) {
        if (bit_f0o.getConstantValue()) {
          out2.assign(new UnsignedInteger(1, new BigInteger("1")), 32);
        } else {
          out2.assign(new UnsignedInteger(2, new BigInteger("2")), 32);

        }
      } else {
        ConditionalScopeTracker.pushMain();
        ConditionalScopeTracker.push(bit_f0o);
        out2.assign(new UnsignedInteger(1, new BigInteger("1")), 32);

        ConditionalScopeTracker.pop();

        ConditionalScopeTracker.push(new Bit(true));

        out2.assign(new UnsignedInteger(2, new BigInteger("2")), 32);
        ConditionalScopeTracker.pop();
        ConditionalScopeTracker.popMain();
      }

    }

    // Boolean/logical operators are different 
    // We use NOT instead of ! 
    // For && and ||, we use AND and OR instead 
    {
      Bit bit_k0o = ((in1.isNotEqualTo(in2)).or(((in2.isEqualTo(out1)).and((out1.isEqualTo(out2)))))).inv().copy();
      if (bit_k0o.isConstant()) {
        if (bit_k0o.getConstantValue()) {
          out3.assign(new UnsignedInteger(2, new BigInteger("2")), 32);
        } else {

        }
      } else {
        ConditionalScopeTracker.pushMain();
        ConditionalScopeTracker.push(bit_k0o);
        out3.assign(new UnsignedInteger(2, new BigInteger("2")), 32);

        ConditionalScopeTracker.pop();

        ConditionalScopeTracker.push(new Bit(true));

        ConditionalScopeTracker.pop();
        ConditionalScopeTracker.popMain();
      }

    }

    // note that integer bitwise operators were overrriden (check the SHA256 example) 

  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
